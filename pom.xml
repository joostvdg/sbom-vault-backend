<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>sbom-vault-backend</artifactId>
  <version>0.1.0-SNAPSHOT</version>
  <name>SBOM Vault Backend</name>


  <properties>
    <java.version>25</java.version>
    <spring-boot.version>3.5.6</spring-boot.version>
    <vaadin.version>24.4.9</vaadin.version>

      <spotless.version>2.44.5</spotless.version>
      <error-prone.version>2.38.0</error-prone.version>
      <spring-modulith.version>1.4.2</spring-modulith.version>
      <google-java-format.version>1.27.0</google-java-format.version>

      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      <project.reporting.inputEncoding>UTF-8</project.reporting.inputEncoding>
  </properties>

    <developers>
        <developer>
            <name>Joost van der Griendt</name>
            <email>dev@joostvdg.net</email>
        </developer>
    </developers>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vaadin</groupId>
      <artifactId>vaadin-spring-boot-starter</artifactId>
      <version>${vaadin.version}</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
      <dependency>
          <groupId>org.flywaydb</groupId>
          <artifactId>flyway-core</artifactId>
      </dependency>
      <dependency>
          <groupId>org.flywaydb</groupId>
          <artifactId>flyway-database-postgresql</artifactId>
      </dependency>


      <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.5.0</version>
    </dependency>
    <dependency>
      <groupId>com.vladmihalcea</groupId>
      <artifactId>hibernate-types-60</artifactId>
      <version>2.21.1</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>dev.sigstore</groupId>
      <artifactId>sigstore-java</artifactId>
      <version>0.7.0</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-checkstyle-plugin</artifactId>
            <version>3.6.0</version>
            <configuration>
                <configLocation>google_checks.xml</configLocation>
            </configuration>
            <executions>
                <execution>
                    <id>validate</id>
                    <phase>validate</phase>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.14.0</version>
            <configuration>
                <source>${java.version}</source>
                <target>${java.version}</target>
                <encoding>UTF-8</encoding>
                <failOnError>true</failOnError>
                <failOnWarning>true</failOnWarning>
                <compilerArgs>
                    <arg>-XDcompilePolicy=simple</arg>
                    <arg>-Xplugin:ErrorProne</arg>
                    <arg>--should-stop=ifError=FLOW</arg>
                    <!--						&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED-->
                    <!--						&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED-->
                    <!--						&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED-->
                    <!--						&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED-->
                    <!--						&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED-->
                    <!--						&#45;&#45;add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED-->
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
                    <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
                    <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>
                </compilerArgs>
                <annotationProcessorPaths>
                    <path>
                        <groupId>com.google.errorprone</groupId>
                        <artifactId>error_prone_core</artifactId>
                        <version>${error-prone.version}</version>
                    </path>
                    <!-- Other annotation processors go here.

                    If 'annotationProcessorPaths' is set, processors will no longer be
                    discovered on the regular -classpath; see also 'Using Error Prone
                    together with other annotation processors' below. -->
                </annotationProcessorPaths>
            </configuration>
        </plugin>
        <plugin>
            <groupId>com.diffplug.spotless</groupId>
            <artifactId>spotless-maven-plugin</artifactId>
            <version>${spotless.version}</version>
            <configuration>
                <!-- optional: limit format enforcement to just the files changed by this feature branch -->
                <formats>
                    <!-- you can define as many formats as you want, each is independent -->
                    <format>
                        <!-- define the files to apply to -->
                        <includes>
                            <include>.gitattributes</include>
                            <include>.gitignore</include>
                        </includes>
                        <!-- define the steps to apply to those files -->
                        <trimTrailingWhitespace/>
                        <endWithNewline/>
                    </format>
                </formats>
                <!-- define a language-specific format -->
                <java>
                    <!-- no need to specify files, inferred automatically, but you can if you want -->

                    <!-- apply a specific flavor of google-java-format and reflow long strings -->
                    <googleJavaFormat>
                        <version>${google-java-format.version}</version>
                        <style>GOOGLE</style>
                        <reflowLongStrings>true</reflowLongStrings>
                        <formatJavadoc>true</formatJavadoc>
                    </googleJavaFormat>

                    <removeUnusedImports /> <!-- self-explanatory -->
                    <importOrder /> <!-- standard import order -->
                    <formatAnnotations />  <!-- fixes formatting of routingType annotations, see below -->
                    <!-- make sure every file has the following copyright header.
                      optionally, Spotless can set copyright years by digging
                      through git history (see "license" section below) -->
                    <licenseHeader>
                        <content>/* (C)2025 */</content>  <!-- or <file>${project.basedir}/license-header</file> -->
                    </licenseHeader>
                </java>
            </configuration>
            <executions>
                <execution>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
  </build>
</project>
